### DONE ### -----------------------------------------------------------------------------------------------------------
changed build test to compile test


### NOW ### ------------------------------------------------------------------------------------------------------------
resolver + logical to runtime converter
    commands
        resolve operators and build a tree with respect to operator priorities
        mg command to instruction converter
        add more instructions

    automatically add buildin definitions to application before resolve
    creation of location and empty objects with just a name

    resolution of logical entity usages
    resolution of operators and additional build steps based on priority
        priority can be choosen by the user
        operators need to be imported

    use cache for usages during resolve to prevent multiple resolution of the same name
        cache should also contain other information like the expected type of the object (class, stamp, function, etc.)


### SOON ### -----------------------------------------------------------------------------------------------------------
make MgCore work
mg relative vs absolute usages
mg add support for multiple (star) usages

think about runtime and logical architecture
    modules or bundles or libraries or packages ...
        we could take a look at locations as folders/directories in os
        packages would be like installer packages in os
        components would be like files in os

    implement logic for loading modules/bundles/libraries/package

mg collection definitions
    they should definitely be distinguished as readable, writeable, readonly, nonnull somehow

mg stamps definitions
    additional information for the compiler
    can be mandatory or optional ?
        for mandatory stamps, the compiler has to throw an error if it cannot handle them

think about static variables, we might want these to supply enums
    where will those be stored in at runtime? in classes directly maybe?


### LATER ### ----------------------------------------------------------------------------------------------------------
mg logic entity versioning ?
mg runtime entity versioning ?

think of possible scheduler
    schedulers can schedule:
        for each core a bunch of threads
        a bunch of threads for bunch of cores
        ... the question there is, if scheduler should be inside of core or application ?

c entities
    add global variable element (dont forget modifiers)
    add thread local modifier
    add extern modifier
    add (c language specific) static modifier
    differentiate c number and text and character literals ???

    bad design detected
        lines should own tokens as a part
        but actually, with static final variables, they cant own them, they just reference them
        the right thing to do is to always create a new token instance!

write mg to c converter (logic or runtime?)

c writer
    optimize operator writer tasks to not always include brackets

function pointers in mg - will be called interfaces (java like interfaces might be called roles)

improve exceptions
    add more exception types
    add some kind of tracing
        how to trace origin for error messages?
            1) might use optional setter, that shall be set for all newly created objects
                origin would be taken from one of the input objects
            2) shouldnt a stack trace be enough? implying we have a tree of entities


### MAYBE LATER ### ----------------------------------------------------------------------------------------------------
limit file size parameter
add entity validations

mg language - required vs optional input and output variables for functions
    can be implemented as syntactical sugar


### IDEAS ### ----------------------------------------------------------------------------------------------------------
very interesting idea
    contextual methods
        entities can have different methods based on current context
            ie CStructure in c to java converter context will have different methods than in c to php converter context
    these can also support overriding
    in each file, we might need to specify context, or specify it in some other way?
    this might also be accomplished by special "inheritance"
        mg will have more types of inheritance: IS <-, LIKE >-<, AS <->, VIEW ->

    find out how to mimic contextual methods in java?
        maybe we are overreacting now, lets make one simple implementation for our case
        and then we can take care of the remaining scenarios!
        keep this java implementation as simple as possible!

        also, think about difference between dependency injection and contextual methods

aliases for modules in application - ie remapping module locations
    this step would probably take in place after the module itself and its dependencies are resolved

if operator
