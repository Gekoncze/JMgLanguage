### DONE ### -----------------------------------------------------------------------------------------------------------
re-done expression resolve architecture
todo cleanup


### NOW ### ------------------------------------------------------------------------------------------------------------
reimplement mg expression resolvers
reimplement mg command resolvers
make sure member call handles context correctly - it needs to change somehow, or give additional member access context !!!

matcher
    how to handle operators?
    how to handle operator replication?
    how to handle member access matching for auto passing self?

operator replication
    list part / list expression would "return multiple values"
    if input and ouptut lists matches, then operator is called for each corresponding input/output pair

literal values
    maybe these can be redone
        better make them always return text
        and use converters to make actual values from them - function calls
        this will also slightly force people to use constants

    store them in function expression ... ?
        how to handle converters for literals?
            when are those called?
                at application startup?
                or during compilation?

how to implement resolution with connections
    onEnter:
        resolve is optional (successful when there is exactly 1 match)

        we are resolving expression, so we don't know its output and input yet
        we might know parent input, so we can filter by that if not null
        we don't know child output, so we cannot filter by that

    resolve children and add children to expression.expressions
        if expression is resolved, then we connect child to expression

    onLeave:
        resolve is mandatory (successful when there is exactly 1 match)
        resolve is not run if already resolved

        we are resolving expression, so we don't know its output and input yet
        we might know parent input, so we can filter by that if not null
        we know child output, so we can always filter by that

    afterLeave:
        we connect children to expression if needed

command resolver
    expression resolver
        each expression element will:
            1) generate local variables (using variable helper)
            2) put a list of output values into Node

    resolution
        first from root to leaves
        then from leaves to root
        at both steps we will check what is available based on filter
            if a single match is made, we select it as target object
            if no match then
                if root to leave resolution, we skip and continue
                if leaf to root resolution, we throw a not found error
            if multiple matches then
                if root to leave resolution, we skip and continue
                if leaf to root resolution, we throw an ambiguous error


### SOON ### -----------------------------------------------------------------------------------------------------------
take into account access modifiers during resolve

implementation of the new simplified runtime model
    we might need a context object being passed
        passed in two ways:
            implicitly - current function context will be used
            explicitly - user provided context will be used

make MgCore work
think about new object creation
    there would be probably some default allocator
    and default factory, which would automatically call function
        with stamps like @create @destroy

complete support for collections
    for resolve, MgParameter needs to be a type/component (see to do in CollectionContext)
    they should definitely be distinguished as readable, writeable, readonly, nonnull somehow

mg add support for relative "../" usages ???
mg add support for multiple (star) usages - is it going to be just a syntactical sugar?

add support for operator definitions
    operators are build on top of functions, as an optional syntactical sugar
    you should still be able to call the function by its name with parameters
    investigate the best way how to express it in the mg language
    add builder for it
    priority can be set in the definition too
    how to import the operators ???

add support for variable number of parameters of functions ?

high-level architecture
    modules or bundles or libraries or packages ...
        we could take a look at locations as folders/directories in os
        packages would be like installer packages in os
        components would be like files in os
    how would this be solved on both logical and runtime level?

mg stamps definitions
    additional information for the compiler or during runtime
    when used, the "instances" cannot hold any values, those will be just references to the definition
    can be mandatory or optional ? or maybe it could be called critical or something like that
        for mandatory stamps, the compiler has to throw an error if it cannot handle them


### LATER ### ----------------------------------------------------------------------------------------------------------
add context for function execution

mg logic entity versioning ?
mg runtime entity versioning ?
mg global variable - add runtime validation for type?
mg member variable - add runtime validation for type?

think of possible scheduler
    schedulers can schedule:
        for each core a bunch of threads
        a bunch of threads for bunch of cores
        ... the question there is, if scheduler should be inside of core or application ?

c entities
    add global variable element (dont forget modifiers)
    add thread local modifier
    add extern modifier
    add (c language specific) static modifier
    differentiate c number and text and character literals ???

    bad design detected
        lines should own tokens as a part
        but actually, with static final variables, they cant own them, they just reference them
        the right thing to do is to always create a new token instance!

write mg to c converter (logic or runtime?)

c writer
    optimize operator writer tasks to not always include brackets

function pointers in mg - will be called interfaces (java like interfaces might be called roles)

improve compiler exceptions
    add more exception types
    add some kind of tracing
        how to trace origin for error messages?
            1) might use optional setter, that shall be set for all newly created objects
                origin would be taken from one of the input objects
            2) shouldnt a stack trace be enough? implying we have a tree of entities

make platform independent threads
    this will require:
        more effort from my side
        generating instructions for functions from its commands and expressions
        add MgThread and MgCore objects
    this will allow:
        more flexibility
        any number of threads in application
        easier manipulation (thread can be started, paused, stopped, etc)
        better memory management (not so much on stack, more on heap)
    not sure:
        if better or worse performance


### MAYBE LATER ### ----------------------------------------------------------------------------------------------------
limit file size parameter
add entity validations
during resolution, inner context cannot shadow outer context results
during resolution, some local variables created by expressions can be reused

mg language - required vs optional input and output variables for functions
    can be implemented as syntactical sugar

move all subtasks to Task class ???
    we could then have execute and try to execute methods

add external (user) exception vs internal exception

(global) function and variable overriding
    VARIABLE Int32 foo
    vs
    OVERRIDE foo VARIABLE Int32 bar
    vs
    VARIABLE Int32 bar OVERRIDE foo
    -
    FUNCTION foo INPUT ... OUTPUT ...
    vs
    OVERRIDE foo FUNCTION bar INPUT ... OUTPUT ...
    vs
    FUNCTION bar INPUT ... OUTPUT ... OVERRIDE foo


### IDEAS ### ----------------------------------------------------------------------------------------------------------
very interesting idea
    contextual methods
        entities can have different methods based on current context
            ie CStructure in c to java converter context will have different methods than in c to php converter context
    these can also support overriding
    in each file, we might need to specify context, or specify it in some other way?
    this might also be accomplished by special "inheritance"
        mg will have more types of inheritance: IS <-, LIKE >-<, AS <->, VIEW ->

    find out how to mimic contextual methods in java?
        maybe we are overreacting now, lets make one simple implementation for our case
        and then we can take care of the remaining scenarios!
        keep this java implementation as simple as possible!

        also, think about difference between dependency injection and contextual methods

aliases for modules in application - ie remapping module locations
    this step would probably take in place after the module itself and its dependencies are resolved

if operator
