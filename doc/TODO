### DONE ### -----------------------------------------------------------------------------------------------------------
simplified block parsing


### NOW ### ------------------------------------------------------------------------------------------------------------
when to resolve operator priority
    maybe first only resolve brackets and chains, leave operators for later time, during resolve I think
    let user choose operator priority by a number
    operators have to be imported!

mg parser
    part builder - should this be handled at "text level" or "logical level" ??? ...
        operator merger - merge symbols that are close to each other and are not brackets or stamps
            this would have to be handled by parser, or not?
                or this can be handled before line sweep
        bracket builder
        chain builder
        keyword grouper
            keywords can be only toplevel, not inside groups
                this wil lbe easily handled by block flattening

        line and stamp block flattening
            dont forget to handle whitespaces properly

    block chaining
        there are groups of keywords following each other, always at the beginning, for example DEFINE CLASS
            then follows no keywords, for example DEFINE CLASS FooBar
                but just in case another keyword follows, it is interpreted as if it was a child block, for example:
                    DEFINE CLASS FooBar IS Bar
                    is the same as
                    DEFINE CLASS FooBar
                        IS Bar
            the same could be with stamps, for example:
                @public DEFINE CLASS FooBar
                is the same as
                @public
                DEFINE CLASS FooBar

            so, there would be two steps in between
                keyword block arrangement
                stamp block arrangement

            this could be part of sweep page task or the result of sweep task would be passed to another method

    relative vs absolute usages

runtime and logical architecture
    modules or bundles or libraries or packages ...
        we could take a look at locations as folders/directories in os
        packages would be like installer packages in os
        components would be like files in os


### SOON ### -----------------------------------------------------------------------------------------------------------
mg logical to runtime entities
add more instructions
implement logic for loading modules

think about mg collections
    they should definitely be distinguished as readable or writeable or both somehow

there should be strictly distinguished sugar and actual language entities
    needs to think a lot about their purpose
    for example function call with expression as parameter could be one, but also dont have to be!

think about static variables, we might want these to supply enums
    those will be stored in the runtime classes, right?

think of possible scheduler
    also think if current architecture is good
    maybe I will postpone schedulers for later ... or now will just make simple round robin one!
    schedulers can schedule:
        for each core a bunch of threads
        a bunch of threads for bunch of cores
        ... the question there is, if scheduler should be inside of core or application ?


### LATER ### ----------------------------------------------------------------------------------------------------------
mg logic entity version
mg runtime entity version

c entities
    add global variable element (dont forget modifiers)
    add thread local modifier
    add extern modifier
    add (c language specific) static modifier
    differentiate c number and text and character literals ???

    bad design detected
        lines should own tokens as a part
        but actually, with static final variables, they cant own them, they just reference them
        the right thing to do is to always create a new token instance!

write mg to c converter (logic or runtime?)

function pointers - might need to add function type

how to trace origin for error messages?
    1) might use optional setter, that shall be set for all newly created objects
        origin would be taken from one of the input objects
    2) shouldnt a stack trace be enough? implying we have a tree of entities


### IDEAS ### ----------------------------------------------------------------------------------------------------------
add entity assertation class with entity assertation exception ???
very interesting idea
    contextual methods
        entities can have different methods based on current context
            ie CStructure in c to java converter context will have different methods than in c to php converter context
    these can also support overriding
    in each file, we might need to specify context, or specify it in some other way?
    this might also be accomplished by special "inheritance"
        mg will have more types of inheritance: IS <-, LIKE >-<, AS <->, VIEW ->

    find out how to mimic contextual methods in java?
        maybe we are overreacting now, lets make one simple implementation for our case
        and then we can take care of the remaining scenarios!
        keep this java implementation as simple as possible!

        also, think about difference between dependency injection and contextual methods

limit file size parameter
limit file location to project folder only ?
aliases for modules in application - ie remapping module locations
    this step would probably take in place after the module itself and its dependencies are resolved

object model
    pointer to its class definition
    list of data storages - each data storage belongs to certain class in inheritance
    class definition contains list of functions

    objects should be able to be aliased
        aliases are two way exchangable
        aliases can have aditional methods, but not aditional data
        maybe those methods can even be overriden

mg language - required and/or optional input and output (probably with stamps)
transparent work with collections and (non-nullable / nullable) objects - if possible
be it only a library yet, ie no project file, for simplicity
optimize operator writer tasks to not always include brackets

add compiler parameters for cproject ?
ideas mg groups - classes can belong to one or more groups
    something like multiple inheritance

do not allow escape sequences or anythign like that
    use special buildin constants or functions
    this will simplify literal handling A LOT

ALL mg paths to be completely relative, or absolute being relative to module

if, then, and, or operators ?