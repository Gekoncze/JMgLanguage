### DONE ### -----------------------------------------------------------------------------------------------------------
improved usages
added filters for usages
added support for star usages
added support for usages inside a class
@instance and @type components are excluded from usages
changed MgFunction - extracted operator as operator info in new MgOperator class


### NOW ### ------------------------------------------------------------------------------------------------------------
add more kinds of variables
    there will be only one kind of logical variable, rest will be specified using annotations
    make sure there are following runtime variables:
        global variable
        instance variable
            function variable
            class variable
        type variable
    add the following annotations:
        @type
        @instance

add more kinds of functions
    there wil lbe only one kind of logical function, rest will be specified using annotations
    make sure there are following runtime functions:
        global function
        instance function
        type function
    re-use the following annotations:
        @type
        @instance

enhance member access operator resolver
    make sure it handles different kinds of variables correctly based on annotations

enhance usages resolver
    make sure there are all required contexts and filters

add buildin operators
    problem - I think we need special handling for &= and $= operator
        we might use matcher there to check lvalue and rvalue compatibility

    add + - * / &== $== < > <= >=
        Int
        Float
        Text
        Bool

add buildin print function
    for all buildin types as parameter

test
    try to actually compile and run some code!
    test what expression like this will do:
        (a * b)(c, d, e)
        what error will be thrown?
        this is something like a parametrized call, but without a name on the left


### SOON ### -----------------------------------------------------------------------------------------------------------
explicit casting
    add buildin as operators
    add option for user to provide his own as operators
    there should be two weights for casting
        as operator should add more weight when matching 100% I think

mg builder - global variable object
mg class - make it also implement class instance
take into account access modifiers during resolve
add support for relative "../" usages ???
add support for multiple (star) usages - is it going to be just a syntactical sugar?

implementation of the new simplified runtime model
    we might need a context object being passed
        passed in two ways:
            implicitly - current function context will be used
            explicitly - user provided context will be used

think about new object creation
    there would be probably some default allocator
    and default factory, which would automatically call function
        with stamps like @create @destroy

complete support for collections
    for resolve, MgParameter needs to be a type/component (see to do in CollectionContext)
    they should definitely be distinguished as readable, writeable, readonly, nonnull somehow

high-level architecture
    modules or bundles or libraries or packages ...
        we could take a look at locations as folders/directories in os
        packages would be like installer packages in os
        components would be like files in os
    how would this be solved on both logical and runtime level?

mg stamps definitions
    additional information for the compiler or during runtime
    when used, the "instances" cannot hold any values, those will be just references to the definition
    can be mandatory or optional ? or maybe it could be called critical or something like that
        for mandatory stamps, the compiler has to throw an error if it cannot handle them
            I dont actually know how much the compiler should be handling those...
                maybe its not a good idea, investigate


### LATER ### ----------------------------------------------------------------------------------------------------------
add context for function execution
add support for variable number of parameters of functions ?

change static create implementations
    make it so the classes registers themselves in a static block

mg logic or runtime entity versioning ?
mg global variable - add runtime validation for type?
mg member variable - add runtime validation for type?
mg function pointers - will be called interfaces
    I am actually also thinking if calling function like foo.bar should be allowed
    if there should be something like foo.bar!
    and chains being supported as usual, so foo.bar!.foobar
    but then again !. would be considered as a single operator which might complicate stuff
    so wither ! would need to be separated, or not use it and have empty brackets as usual ()
    this would also solve the ambiguous function pointer call (as execution or as storage)

mg roles (like java interfaces)

write mg to c converter
    decide if to convert from logical or runtime entities

    c entities
        add global variable element (dont forget modifiers)
        add thread local modifier
        add extern modifier
        add (c language specific) static modifier
        differentiate c number and text and character literals ???

        bad design detected
            lines should own tokens as a part
            but actually, with static final variables, they cant own them, they just reference them
            the right thing to do is to always create a new token instance!

    c writer
        optimize operator writer tasks to not always include brackets

improve compiler exceptions
    add external (user) exception vs internal exception
    add more exception types
    add some kind of tracing
        how to trace origin for error messages?
            1) might use optional setter, that shall be set for all newly created objects
                origin would be taken from one of the input objects
            2) shouldnt a stack trace be enough? implying we have a tree of entities

make platform independent threads
    this will require:
        more effort from my side
        generating instructions for functions from its commands and expressions
        add MgThread and MgCore objects
    this will allow:
        more flexibility
        any number of threads in application
        easier manipulation (thread can be started, paused, stopped, etc)
        better memory management (not so much on stack, more on heap)
    not sure:
        if better or worse performance

    make MgCore work

    think of possible scheduler
        schedulers can schedule:
            for each core a bunch of threads
            a bunch of threads for bunch of cores
            ... the question there is, if scheduler should be inside of core or application ?


### MAYBE LATER ### ----------------------------------------------------------------------------------------------------
allow static access to instance functions using special usages
    USING INSTANCE FUNCTION cz.mg.Foo.bar
    USING TYPE FUNCTION cz.mg.Foo.bar

additional validations
    add some configurable limits to better sanitize input
        limit file size
        limit line size

    add entity validations

optimizations
    during resolution, some local variables created by expressions can be reused
    add optmized version of variable helper

mg language - required vs optional input and output variables for functions
    can be implemented as syntactical sugar

move all subtasks to Task class ???

(global) function and variable overriding
    VARIABLE Int32 foo
    vs
    OVERRIDE foo VARIABLE Int32 bar
    vs
    VARIABLE Int32 bar OVERRIDE foo
    -
    FUNCTION foo INPUT ... OUTPUT ...
    vs
    OVERRIDE foo FUNCTION bar INPUT ... OUTPUT ...
    vs
    FUNCTION bar INPUT ... OUTPUT ... OVERRIDE foo


### IDEAS ### ----------------------------------------------------------------------------------------------------------
add support for builder like syntax using double dot ..

add support for parents inside objects
    should be part of an interface so it can be more dynamic for buildin types etc.
    prevent creating cycles (needs to be checked at runtime)
        could be theoretically at compile time, but would restrict types too much
            (which migh have both good and bad sides)

make mg class be able to limit what type can own it

usings could automatically add some prefix or suffix to prevent ambiguous usages more easily
    these could be defined in some special locations called areas maybe?

add support for conditional member access
    expression will be skipped if lvalue is null
    this might be tricky though, cuz it could appear inside more complicated expression

literals
    idea - there can be two types:
        '' - converted at startup when code is loaded
        "" - converted at runtime during expression execution

    alternative idea - again two types, but different meaning:
        '' - convertible literal
        "" - plain text literal

very interesting idea
    contextual methods
        entities can have different methods based on current context
            ie CStructure in c to java converter context will have different methods than in c to php converter context
    these can also support overriding
    in each file, we might need to specify context, or specify it in some other way?
    this might also be accomplished by special "inheritance"
        mg will have more types of inheritance: IS <-, LIKE >-<, AS <->, VIEW ->

    find out how to mimic contextual methods in java?
        maybe we are overreacting now, lets make one simple implementation for our case
        and then we can take care of the remaining scenarios!
        keep this java implementation as simple as possible!

        also, think about difference between dependency injection and contextual methods

aliases for modules in application - ie remapping module locations
    this step would probably take in place after the module itself and its dependencies are resolved

if ternary operator ?
