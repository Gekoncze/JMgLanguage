because of a bad design of the java programming language, some classes need prefixes in their names
    I read a discussion about this on stackoverflow and it seems such feature will never be added
    some say it could be sign of a bad design but it isn't, it was nicely explained in the comments
        in short, the use case is when we have two distinct models and we are transforming one into another
            in our case, it is the languages being the distinct models

all mg entities should implement MgEntity
all c entities should implement CEntity
logical mg entities should only serve as a "template" for actual runtime objects

locations should be in both logical and runtime entities
locations are handled by parser as folders/directories

possible path rules: (pick in order first one that is valid) ... solve
    if field and named, then use object name
    if field, then use field name (or use object type name)
    if collection and named, then use object name
    if collection, then use field name and order number (or type name and order number)

modules should never depend on something outside of their location
    (ie something stored in some parent or sibling location)
    unless it is explicitly marked as dependency
    I think modules should be able to map to certain locations
        there might be some sort of re-mapping at the application level
        and each module could have something like a hint, a default location if not explicitly specified
        all of this might need some change in design
            I think the right thing to do is to have modules contain what they really contain
            and then the locations would just have links to the objects in the modules!
            by the way, this is very similar to how package management works in operating systems!


Do not use static methods
    using tasks helps saving the execution tree and inspect it more closely when debugging

Do not use public fields
    entities can and should add basic validation for their input when setting the value
    the way data is saved can vary, entities could put it directly in database or store it in c memory allocation

ensure good naming
    logic a -> logic b = converter

    examples -> logic = ???
    logic -> examples = ???

    page -> examples = reader
    examples -> page = writer

    string -> page = parser
    page -> string = formatter

resolve should be done during runtime
    when loading compile entities, actual objects are temporarily represented by unresolved objects

during resolution, these objects are examined:
    1) the current/parent entity
    2) the current location
    3) the current context
    then all results are gathered and if there is more than one, then throw an exception - ambiguous entity/object

consider the problem of the time of resolve of names
    compile time - resolve entities during compilation - very limited
    startup time - resolve entities at application startup - slightly limited
    runtime - load and resolve entities at runtime - unlimited! -- I will use this one

collection polymorphism problem
    ReadableList<Child> can be passed as ReadableList<Parent>
    WriteableList<Child> cannot be passed as WritableList<Parent> !!!